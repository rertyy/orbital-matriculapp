// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: userQueries.sql

package sqlc

import (
	"context"
)

const addUser = `-- name: AddUser :exec
INSERT INTO users (username, password, email)
VALUES ($1, $2, $3)
`

type AddUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser, arg.Username, arg.Password, arg.Email)
	return err
}

const changePassword = `-- name: ChangePassword :exec
UPDATE users
SET password = $2
WHERE username = $1
`

type ChangePasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword, arg.Username, arg.Password)
	return err
}

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT 1 from users where username = $1)
`

func (q *Queries) CheckUserExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, password
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}
