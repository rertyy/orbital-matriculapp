// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: forumQueries.sql

package sqlc

import (
	"context"
	"time"
)

const addPost = `-- name: AddPost :one
INSERT INTO posts (title, body, category_id, created_by)
VALUES ($1, $2, $3, $4)
RETURNING post_id, title, body, category_id, created_at, created_by, last_updated
`

type AddPostParams struct {
	Title      string `json:"title"`
	Body       string `json:"body"`
	CategoryID int32  `json:"category_id"`
	CreatedBy  int32  `json:"created_by"`
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, addPost,
		arg.Title,
		arg.Body,
		arg.CategoryID,
		arg.CreatedBy,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.Title,
		&i.Body,
		&i.CategoryID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.LastUpdated,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE
FROM posts
WHERE post_id = $1
`

func (q *Queries) DeletePost(ctx context.Context, postID int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT p.post_id,
       p.title,
       p.body,
       p.category_id,
       c.cat_name,
       p.created_by,
       u.username,
       p.created_at,
       p.last_updated
FROM posts p
         JOIN categories c ON p.category_id = c.cat_id
         JOIN users u ON p.created_by = u.user_id
`

type GetAllPostsRow struct {
	PostID      int32     `json:"post_id"`
	Title       string    `json:"title"`
	Body        string    `json:"body"`
	CategoryID  int32     `json:"category_id"`
	CatName     string    `json:"cat_name"`
	CreatedBy   int32     `json:"created_by"`
	Username    string    `json:"username"`
	CreatedAt   time.Time `json:"created_at"`
	LastUpdated time.Time `json:"last_updated"`
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.PostID,
			&i.Title,
			&i.Body,
			&i.CategoryID,
			&i.CatName,
			&i.CreatedBy,
			&i.Username,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT p.post_id,
       p.title,
       p.body,
       p.category_id,
       c.cat_name,
       p.created_by,
       u.username,
       p.created_at,
       p.last_updated
FROM posts p
         JOIN categories c ON p.category_id = c.cat_id
         JOIN users u ON p.created_by = u.user_id
WHERE p.post_id = $1
`

type GetPostByIdRow struct {
	PostID      int32     `json:"post_id"`
	Title       string    `json:"title"`
	Body        string    `json:"body"`
	CategoryID  int32     `json:"category_id"`
	CatName     string    `json:"cat_name"`
	CreatedBy   int32     `json:"created_by"`
	Username    string    `json:"username"`
	CreatedAt   time.Time `json:"created_at"`
	LastUpdated time.Time `json:"last_updated"`
}

func (q *Queries) GetPostById(ctx context.Context, postID int32) (GetPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, postID)
	var i GetPostByIdRow
	err := row.Scan(
		&i.PostID,
		&i.Title,
		&i.Body,
		&i.CategoryID,
		&i.CatName,
		&i.CreatedBy,
		&i.Username,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title        = $1,
    body         = $2,
    category_id  = $3,
    last_updated = now()
WHERE post_id = $4
RETURNING post_id, title, body, category_id, created_at, created_by, last_updated
`

type UpdatePostParams struct {
	Title      string `json:"title"`
	Body       string `json:"body"`
	CategoryID int32  `json:"category_id"`
	PostID     int32  `json:"post_id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Body,
		arg.CategoryID,
		arg.PostID,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.Title,
		&i.Body,
		&i.CategoryID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.LastUpdated,
	)
	return i, err
}
